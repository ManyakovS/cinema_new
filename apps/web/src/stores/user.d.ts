import type { CreateVerifyDto, LoginUserDto, RegisterUserDto, VerifyDto } from "api/src/modules/auth/dto/auth.dto";
export declare const ACCESS_TOKEN_KEY = "access_token";
export declare const RESTORE_EMAIL = "restore_email";
export declare const useUserStore: import("pinia").StoreDefinition<"userStore", import("pinia")._UnwrapAll<Pick<{
    user: globalThis.Ref<{
        id?: number;
        createdAt?: Date;
        updatedAt?: Date;
        email?: string;
        phone?: string;
        name?: string;
        password?: string;
        imageId?: number;
        gender?: string;
        birthday?: Date;
    }>;
    accessToken: globalThis.Ref<string>;
    isAuthenticated: globalThis.Ref<boolean>;
    queryEmail: globalThis.WritableComputedRef<string>;
    login: (data: LoginUserDto) => Promise<void>;
    register: (data: RegisterUserDto) => Promise<void>;
    getCurrentUser: () => Promise<void>;
    auth: () => Promise<string>;
    logout: () => Promise<void>;
    setQueryEmail: (email: string) => void;
    deleteQueryEmail: () => void;
    changeImage: (userId: any, imageId: any) => Promise<void>;
    verifyEmail: (body: CreateVerifyDto) => Promise<void>;
    verifyCode: (body: VerifyDto) => Promise<boolean>;
}, "user" | "accessToken" | "isAuthenticated" | "queryEmail">>, Pick<{
    user: globalThis.Ref<{
        id?: number;
        createdAt?: Date;
        updatedAt?: Date;
        email?: string;
        phone?: string;
        name?: string;
        password?: string;
        imageId?: number;
        gender?: string;
        birthday?: Date;
    }>;
    accessToken: globalThis.Ref<string>;
    isAuthenticated: globalThis.Ref<boolean>;
    queryEmail: globalThis.WritableComputedRef<string>;
    login: (data: LoginUserDto) => Promise<void>;
    register: (data: RegisterUserDto) => Promise<void>;
    getCurrentUser: () => Promise<void>;
    auth: () => Promise<string>;
    logout: () => Promise<void>;
    setQueryEmail: (email: string) => void;
    deleteQueryEmail: () => void;
    changeImage: (userId: any, imageId: any) => Promise<void>;
    verifyEmail: (body: CreateVerifyDto) => Promise<void>;
    verifyCode: (body: VerifyDto) => Promise<boolean>;
}, never>, Pick<{
    user: globalThis.Ref<{
        id?: number;
        createdAt?: Date;
        updatedAt?: Date;
        email?: string;
        phone?: string;
        name?: string;
        password?: string;
        imageId?: number;
        gender?: string;
        birthday?: Date;
    }>;
    accessToken: globalThis.Ref<string>;
    isAuthenticated: globalThis.Ref<boolean>;
    queryEmail: globalThis.WritableComputedRef<string>;
    login: (data: LoginUserDto) => Promise<void>;
    register: (data: RegisterUserDto) => Promise<void>;
    getCurrentUser: () => Promise<void>;
    auth: () => Promise<string>;
    logout: () => Promise<void>;
    setQueryEmail: (email: string) => void;
    deleteQueryEmail: () => void;
    changeImage: (userId: any, imageId: any) => Promise<void>;
    verifyEmail: (body: CreateVerifyDto) => Promise<void>;
    verifyCode: (body: VerifyDto) => Promise<boolean>;
}, "verifyCode" | "auth" | "login" | "register" | "getCurrentUser" | "logout" | "setQueryEmail" | "deleteQueryEmail" | "changeImage" | "verifyEmail">>;
//# sourceMappingURL=user.d.ts.map